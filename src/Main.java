import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.ImageObserver;
import java.awt.image.ImageProducer;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;

class JPanel01 extends JPanel {
	private JButton StartBtn, StartBtn_hover;
	private JLabel bg;
	private Main one;
	
	public JPanel01(Main one) { // gameMain page
		this.one = one;
		setLayout(null);
		
		bg = new JLabel(new ImageIcon("img/main.png"));
		bg.setBounds(0, 0, 1920, 1080);
		
		StartBtn = new JButton(new ImageIcon("img/startBtn.png"));
		StartBtn.setBounds(750, 540, 450, 450);
		StartBtn.setBorderPainted(false);
		StartBtn.setFocusPainted(false);
		StartBtn.setContentAreaFilled(false);
		
		StartBtn.setRolloverIcon(new ImageIcon("img/startBtn_hover.png")); // hover ¿ªÇÒ
		
		add(StartBtn);
		add(bg);
		
		StartBtn.addActionListener(new MyActionListener());
	}
	class MyActionListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			one.change("panel02");
		}
	}
}

class JPanel02 extends JPanel { // gameExplain page
	private JButton gameStartBtn;
	private JLabel bg;
	private Main one;
	private JTextField name;
	String userName;
	
	public JPanel02(Main one) {
		this.one = one;
		setLayout(null);
		
		bg = new JLabel(new ImageIcon("img/explain.png"));
		bg.setBounds(0, 0, 1920, 1080);
		
		name = new JTextField(10) {
			public void setBorder(Border border) { }
		};
		name.setFont(name.getFont().deriveFont(Font.PLAIN, 24f));
		name.setBounds(630, 915, 300, 70);
		name.setHorizontalAlignment(name.CENTER);
		
		gameStartBtn = new JButton(new ImageIcon("img/gameStartBtn.png"));
		gameStartBtn.setBounds(1150, 910, 200, 100);
		gameStartBtn.setBorderPainted(false);
		gameStartBtn.setFocusPainted(false);
		gameStartBtn.setContentAreaFilled(false);
		
		gameStartBtn.setRolloverIcon(new ImageIcon("img/gameStartBtn_hover.png"));
		
		bg.add(name);
		bg.add(gameStartBtn);
		add(bg);
		
		gameStartBtn.addActionListener(new MyActionListener());
	}
	class MyActionListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			userName = name.getText();
			if(userName.equals("")) {
				name.setText("ÀÌ¸§À» ÀÔ·ÂÇØÁÖ¼¼¿ä");
				name.requestFocus();
				name.selectAll();
			} else {
				try {
					currentUser(userName);
				} catch (IOException e1) {
					e1.printStackTrace();
				}
				one.jpanel05 = new JPanel05(one);
				add(one.jpanel05);
				one.change("panel05");
			}
		}
	}
	public void currentUser(String name) throws IOException {
		PrintWriter pw = new PrintWriter("C:/java_study/ITshow/file/userName.txt");
		pw.println(name);
		
		pw.close();
	}
}

class JPanel04 extends JPanel { // gameRanking page
	public Connection connection;
	private JButton mainBtn;
	private JLabel bg, rankingName, rankingScore;
	private Main one;
	
	public JPanel04(Main one) {
		this.one = one;
		setLayout(null);
		
		bg = new JLabel(new ImageIcon("img/ranking.png"));
		bg.setBounds(0, 0, 1920, 1080);
	
		mainBtn = new JButton(new ImageIcon("img/startBtn.png"));
		mainBtn.setBounds(1455, 300, 450, 450);
		mainBtn.setBorderPainted(false);
		mainBtn.setFocusPainted(false);
		mainBtn.setContentAreaFilled(false);
		
		rankingName = new JLabel();
		rankingName.setFont(new Font("³ª´®°íµñ", Font.PLAIN, 26));
		//rankingName.setBorder(new LineBorder(Color.black));
		rankingName.setBounds(460, 300, 355, 600);
		
		rankingScore = new JLabel();
		rankingScore.setFont(new Font("³ª´®°íµñ", Font.PLAIN, 26));
		rankingScore.setBounds(870, 300, 355, 600);
		
		mainBtn.setRolloverIcon(new ImageIcon("img/mainBtn_hover.png"));
		
		bg.add(rankingName);
		bg.add(rankingScore);
		bg.add(mainBtn);
		add(bg);
		
		try {
			connectionDB();
		} catch (ClassNotFoundException | SQLException e) {
			e.printStackTrace();
		}
		
		mainBtn.addActionListener(new MyActionListener());
	}
	class MyActionListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			one.change("panel01");
		}
	}
	public void connectionDB() throws ClassNotFoundException, SQLException {
		int i = 0;
		String userName, userScore;
		String beforeName = "<html>";
		String beforeScore = "<html>";
		Class.forName("org.sqlite.JDBC");
		connection = DriverManager.getConnection("jdbc:sqlite:itshow.db");
		Statement s = connection.createStatement();
		
		ResultSet rs = s.executeQuery("SELECT * FROM userTbl ORDER BY userScore DESC LIMIT 10");
		
		while(rs.next()) {
			i++;
			userName = rs.getString("userName");
			userScore = rs.getString("userScore");
			
			if(i<=2) {
				beforeName += "<font size=16><b>" + userName + "</b></font><br><font size=4><p></p></font>";
				beforeScore += "<font size=16><b>" + userScore + "</b></font><br><font size=4><p></p></font>";
			} else {
				beforeName += userName + "<br><font size=4><p></p></font>";
				beforeScore += userScore + "<br><font size=4><p></p></font>";
			}
			
		}
		
		beforeName += "</html>";
		beforeScore += "</html>";
		
		rankingName.setText(beforeName);
		rankingScore.setText(beforeScore);
		
		s.close();
		rs.close();
		connection.close();
	}
}

class JPanel05 extends JPanel { // gameMain page
	public Connection connection;
	private JButton check, pass, ranking, restart;
	private JLabel bg, overBg, showCont, content, p1, p2, p3, warning, correct, incorrect;
	private JTextField input;
	private Main one;
	private int score = 0, passChk = 0, rand_index = 0, i = 0, time = 70;
	private String inputText;
	private String nara, sudo, name;

	public JPanel05(Main one) {
		this.one = one;
		setLayout(null);
		
		bg = new JLabel(new ImageIcon("img/board.png"));
		bg.setBounds(0, 0, 1920, 1080);
		
		overBg = new JLabel(new ImageIcon("img/gameover.png"));
		overBg.setBounds(0, 0, 1920, 1080);
		overBg.setVisible(false);
		
		ranking = new JButton(new ImageIcon("img/rankingBtn.png"));
		ranking.setBounds(790, 600, 270, 50);
		ranking.setBorderPainted(false);
		ranking.setFocusPainted(false);
		ranking.setContentAreaFilled(false);
		ranking.setRolloverIcon(new ImageIcon("img/rankingBtn_hover.png"));
		ranking.setVisible(false);
		
		restart = new JButton(new ImageIcon("img/restartBtn.png"));
		restart.setBounds(790, 710, 270, 50);
		restart.setBorderPainted(false);
		restart.setFocusPainted(false);
		restart.setContentAreaFilled(false);
		restart.setRolloverIcon(new ImageIcon("img/restartBtn_hover.png"));
		restart.setVisible(false);
		
		warning = new JLabel(new ImageIcon("img/passWarning.png"));
		warning.setBounds(0, 0, 1920, 1080);
		warning.setVisible(false);
		
		correct = new JLabel(new ImageIcon("img/correct.png"));
		correct.setBounds(700, 300, 618, 517);
		correct.setVisible(false);
		
		incorrect = new JLabel(new ImageIcon("img/incorrect.png"));
		incorrect.setBounds(300, 200, 516, 397);
		incorrect.setVisible(false);
		
		p1 = new JLabel(new ImageIcon("img/passIcon.png"));
		p1.setBounds(730, 30, 100, 75);
		p2 = new JLabel(new ImageIcon("img/passIcon.png"));
		p2.setBounds(880, 30, 100, 75);
		p3 = new JLabel(new ImageIcon("img/passIcon.png"));
		p3.setBounds(1030, 30, 100, 75);
		content = new JLabel(new ImageIcon("img/content.png"));
		content.setBounds(890, 340, 700, 100);
		
		showCont = new JLabel("");
		showCont.setFont(new Font("³ª´®°íµñ", Font.PLAIN, 80));
		showCont.setHorizontalAlignment(showCont.CENTER);
		showCont.setBounds(385, 340, 700, 100);
		
		input = new JTextField(16) {
			public void setBorder(Border border) { }
		};
		input.setFont(input.getFont().deriveFont(Font.PLAIN, 60f));
		input.setBounds(460, 475, 1000, 130);
		input.setHorizontalAlignment(input.CENTER);
		
		check = new JButton(new ImageIcon("img/checkBtn.png"));
		check.setBounds(730, 640, 210, 210);
		check.setBorderPainted(false);
		check.setFocusPainted(false);
		check.setContentAreaFilled(false);
		check.setRolloverIcon(new ImageIcon("img/checkBtn_hover.png"));
		
		pass = new JButton(new ImageIcon("img/passBtn.png"));
		pass.setBounds(960, 640, 210, 210);
		pass.setBorderPainted(false);
		pass.setFocusPainted(false);
		pass.setContentAreaFilled(false);
		pass.setRolloverIcon(new ImageIcon("img/passBtn_hover.png"));
		
		add(warning);
		add(ranking);
		add(restart);
		add(overBg);
		add(correct);
		add(incorrect);
		add(p1); add(p2); add(p3);
		add(check);
		add(pass);
		add(content);
		add(input);
		add(showCont);
		add(bg);
		
		ranking.addActionListener(new MyActionListener());
		restart.addActionListener(new MyActionListener());
		check.addActionListener(new MyActionListener());
		pass.addActionListener(new MyActionListener());
		
		Test();
		timer.scheduleAtFixedRate(task, 1500, 1000);
		
		input.addKeyListener(new KeyAdapter() {
			public void keyPressed(KeyEvent e) {
				if(e.getKeyCode() == KeyEvent.VK_ENTER) {
					check();
				}
			}
		 });
		   
	}
	public void paint(Graphics g) {
		super.paint(g);
		g.setFont(new java.awt.Font("³ª´®°íµñ",Font.PLAIN,60));
		g.drawString(score+"", 450, 93);
		g.drawString(time+"", 1580, 94);
	}
	class MyActionListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			if(e.getSource() == ranking) {
				one.change("panel04");
			} else if(e.getSource() == restart) {
				one.change("panel01");
			} else if(e.getSource() == check) {
				check();
			} else if(e.getSource() == pass) {
				passChk();
			}
		}
	}
	Timer timer = new Timer();
	TimerTask task = new TimerTask( ) {
		@Override
		public void run() {
			if(time >= 1) {
				time--;
				repaint();
			} else {
				timer.cancel();
				overBg.setVisible(true);
				ranking.setVisible(true);
				restart.setVisible(true);
				check.setEnabled(false);
				pass.setEnabled(false);
				input.setEnabled(false);
				try {
					connectionDB();
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
			}
		}
	};
	
	public void Test() {
		String nara[] = { "°¡³ª", "°¡ºÀ", "°¡ÀÌ¾Æ³ª", "°¨ºñ¾Æ", "°úÅ×¸»¶ó", "±×·¹³ª´Ù", "±×¸®½º", "±â´Ï", "±â´Ïºñ»ç¿ì"
				, "³ª¹Ìºñ¾Æ", "³ª¿ì·ç", "³ªÀÌÁö¸®¾Æ", "³×´ú¶õµå", "³×ÆÈ", "³ë¸£¿þÀÌ", "´ºÁú·£µå", "´ÏÁ¦¸£", "´ÏÄ«¶ó°ú"
				, "´ëÇÑ¹Î±¹", "µ§¸¶Å©", "µµ¹Ì´ÏÄ«", "µ¶ÀÏ", "µ¿Æ¼¸ð¸£"
				, "¶ó¿À½º", "¶óÀÌº£¸®¾Æ", "¶óÆ®ºñ¾Æ", "·¯½Ã¾Æ", "·¹¹Ù³í", "·¹¼ÒÅä", "·ç¸¶´Ï¾Æ", "·è¼ÀºÎ¸£Å©", "¸£¿Ï´Ù", "¸®ºñ¾Æ", "¸®Åõ¾Æ´Ï¾Æ", "¸®È÷ÅÙ½´Å¸ÀÎ"
				, "¸¶´Ù°¡½ºÄ«¸£", "¸¶¼È Á¦µµ", "¸»¶óÀ§", "¸»·¹ÀÌ½Ã¾Æ", "¸»¸®", "¸ß½ÃÄÚ", "¸ð³ªÄÚ", "¸ð·ÎÄÚ"
				, "¸ð¸®¼Å½º", "¸ð¸®Å¸´Ï", "¸ðÀáºñÅ©", "¸óÅ×³×±×·Î", "¸ôµµ¹Ù", "¸ôµðºê", "¸ôÅ¸", "¸ù°ñ", "¹Ì±¹", "¹Ì¾á¸¶"
				, "¹Ù´©¾ÆÅõ", "¹Ù·¹ÀÎ", "¹Ùº£ÀÌµµ½º", "¹ÙÆ¼Ä­ ½Ã±¹", "¹ÙÇÏ¸¶", "¹æ±Û¶óµ¥½Ã", "º£³Ã", "º£³×¼ö¿¤¶ó", "º£Æ®³²", "º§±â¿¡", "º§¶ó·ç½º", "º§¸®Áî"
				, "º¸Ã÷¿Í³ª", "º¼¸®ºñ¾Æ", "ºÎ·éµð", "ºÎ¸£Å°³ªÆÄ¼Ò", "ºÎÅº", "ºÒ°¡¸®¾Æ", "ºê¶óÁú", "ºê·ç³ªÀÌ"
				, "»ç¸ð¾Æ", "»ç¿ìµð¾Æ¶óºñ¾Æ", "»ê¸¶¸®³ë", "»óÅõ¸Þ ÇÁ¸°½ÃÆä", "¼¼³×°¥", "¼¼¸£ºñ¾Æ", "¼¼ÀÌ¼Ð", "¼¼ÀÎÆ®·ç½Ã¾Æ", "¼Ò¸»¸®¾Æ"
				, "¼Ö·Î¸ó Á¦µµ", "¼ö´Ü", "¼ö¸®³²", "½º¸®¶ûÄ«", "½º¿ÍÁú¶õµå", "½º¿þµ§", "½ºÀ§½º", "½ºÆäÀÎ", "½½·Î¹ÙÅ°¾Æ", "½½·Îº£´Ï¾Æ", "½Ã¸®¾Æ", "½Ã¿¡¶ó¸®¿Â", "½Ì°¡Æ÷¸£"
				, "¾Æ¶ø¿¡¹Ì¸®Æ®", "¾Æ¸£¸Þ´Ï¾Æ", "¾Æ¸£ÇîÆ¼³ª", "¾ÆÀÌ½½¶õµå", "¾ÆÀÌÆ¼", "¾ÆÀÏ·£µå", "¾ÆÁ¦¸£¹ÙÀÌÀÜ", "¾ÆÇÁ°¡´Ï½ºÅº", "¾Èµµ¶ó", "¾Ë¹Ù´Ï¾Æ", "¾ËÁ¦¸®", "¾Ó°ñ¶ó", "¾ØÆ¼°¡ ¹ÙºÎ´Ù"
				, "¿¡¸®Æ®·¹¾Æ", "¿¡½ºÅä´Ï¾Æ", "¿¡Äâµµ¸£", "¿¡Æ¼¿ÀÇÇ¾Æ", "¿¤»ì¹Ùµµ¸£", "¿µ±¹", "¿¹¸à", "¿À¸¸", "¿À½ºÆ®·¹ÀÏ¸®¾Æ", "¿À½ºÆ®¸®¾Æ", "¿ÂµÎ¶ó½º", "¿ä¸£´Ü", "¿ì°£´Ù", "¿ì·ç°úÀÌ"
				, "¿ìÁîº£Å°½ºÅº", "¿ìÅ©¶óÀÌ³ª", "ÀÌ¶óÅ©", "ÀÌ¶õ", "ÀÌ½º¶ó¿¤", "ÀÌÁýÆ®", "ÀÌÅ»¸®¾Æ", "ÀÎµµ", "ÀÎµµ³×½Ã¾Æ", "ÀÏº»"
				, "ÀÚ¸ÞÀÌÄ«", "Àáºñ¾Æ", "Àûµµ ±â´Ï", "Á¶Áö¾Æ(±¹°¡)", "ÁßÈ­¹Î±¹", "ÁßÈ­ÀÎ¹Î°øÈ­±¹", "ÁöºÎÆ¼", "Áü¹Ùºê¿þ"
				, "Â÷µå", "Ã¼ÄÚ", "Ä¥·¹"
				, "Ä«¸Þ·é", "Ä«º¸º£¸£µ¥", "Ä«ÀÚÈå½ºÅº", "Ä«Å¸¸£", "Ä¯º¸µð¾Æ", "Ä³³ª´Ù", "ÄÉ³Ä", "ÄÚ¸ð·Î", "ÄÚ½ºÅ¸¸®Ä«", "ÄÚÆ®µðºÎ¾Æ¸£", "ÄÝ·Òºñ¾Æ", "Äá°í °øÈ­±¹"
				, "Äí¹Ù", "Äí¿þÀÌÆ®", "Å©·Î¾ÆÆ¼¾Æ", "Å°¸£±â½º½ºÅº", "Å°¸®¹Ù½Ã", "Å°ÇÁ·Î½º"
				, "Å¸ÀÌ", "Å¸ÁöÅ°½ºÅº", "ÅºÀÚ´Ï¾Æ", "ÅÍÅ°", "Åä°í", "Åë°¡", "Åõ¸£Å©¸Þ´Ï½ºÅº", "Åõ¹ß·ç", "Æ¢´ÏÁö", "Æ®¸®´Ï´Ùµå Åä¹Ù°í"
				, "ÆÄ³ª¸¶", "ÆÄ¶ó°úÀÌ", "ÆÄÅ°½ºÅº", "ÆÄÇª¾Æ ´º±â´Ï", "ÆÈ¶ó¿ì", "Æä·ç", "Æ÷¸£Åõ°¥", "Æú¶õµå", "ÇÁ¶û½º", "ÇÇÁö", "ÇÉ¶õµå", "ÇÊ¸®ÇÉ", "Çë°¡¸®" };
		String sudo[] = { "¾ÆÅ©¶ó", "¸®ºê¸£ºô", "Á¶ÁöÅ¸¿î", "¹ÝÁÙ", "°úÅ×¸»¶ó", "¼¼ÀÎÆ®Á¶Áö½º", "¾ÆÅ×³×", "ÄÚ³ªÅ¬", "ºñ»ç¿ì"
				, "ºóÆ®ÈÄÅ©", "¾ß·»", "¾ÆºÎÀÚ", "¾Ï½ºÅ×¸£´ã", "Ä«Æ®¸¸µÎ", "¿À½½·Î", "À£¸µÅÏ", "´Ï¾Æ¸Þ", "¸¶³ª°ú"
				, "¼­¿ï", "Äêº¥ÇÏ¿î", "»êÅäµµ¹Ö°í", "º£¸¦¸°", "µô¸®"
				, "ºñ¿£Æ¼¾È", "¸ó·Îºñ¾Æ", "¸®°¡", "¸ð½ºÅ©¹Ù", "º£ÀÌ·çÆ®", "¸¶¼¼·ç", "ºÎÄí·¹½´Æ¼", "·ó»óºÎ¸£", "Å°°¥¸®", "Æ®¸®Æú¸®", "ºô´Ï¿ì½º", "¹ÙµÎÃ÷"
				, "¾ÈÅ¸³ª³ª¸®º¸", "¸¶ÁÖ·Î", "¸±·Õ±Ë", "Äí¾Ë¶ó·ëÇª¸£", "¹Ù¸¶ÄÚ", "¸ß½ÃÄÚ½ÃÆ¼", "¸ð³ªÄÚ", "¶ó¹ÙÆ®"
				, "Æ÷Æ®·çÀÌ½º", "´©¾Ç¼îÆ®", "¸¶ÇªÅõ", "Æ÷µå°í¸®Â÷", "Å°½Ã³ª¿ì", "¸»·¹", "¹ß·¹Å¸", "¿ï¶õ¹ÙÅä¸£", "¿ö½ÌÅÏ D.C.", "³×ÇÇµµ"
				, "Æ÷Æ® ºô¶ó", "¸¶³ª¸¶", "ºê¸®ÁöÅ¸¿î", "¹ÙÆ¼Ä­ ½Ã±¹", "³ª»ç¿ì", "´ÙÄ«", "Æ÷¸£Åä³ëº¸", "Ä«¶óÄ«½º", "ÇÏ³ëÀÌ", "ºê·ò¼¿", "¹Î½ºÅ©", "º§¸ðÆÇ"
				, "°¡º¸·Î³×", "¶óÆÄ½º", "ºÎÁÜºÎ¶ó", "¿Í°¡µÎ±¸", "ÆÀºÎ", "¼ÒÇÇ¾Æ", "ºê¶óÁú¸®¾Æ", "¹Ý´Ù¸£½º¸®ºê°¡¿Ï"
				, "¾ÆÇÇ¾Æ", "¸®¾ßµå", "»ê¸¶¸®³ë", "»óÅõ¸Þ", "´ÙÄ«¸£", "º£¿À±×¶óµå", "ºòÅä¸®¾Æ", "Ä³½ºÆ®¸®½º", "¸ð°¡µð½´"
				, "È£´Ï¾Æ¶ó", "Ä«¸£Åù", "ÆÄ¶ó¸¶¸®º¸", "ÄÝ·Òº¸", "À½¹Ù¹Ù³×", "½ºÅåÈ¦¸§", "º£¸¥", "¸¶µå¸®µå", "ºê¶óÆ¼½½¶ó¹Ù", "·ùºí·ª³ª", "´Ù¸¶½ºÄí½º", "ÇÁ¸®Å¸¿î", "½Ì°¡Æ÷¸£"
				, "¾ÆºÎ´Ùºñ", "¿¹·¹¹Ý", "ºÎ¿¡³ë½º¾ÆÀÌ·¹½º", "·¹ÀÌÄ¼ºñÅ©", "Æ÷¸£ÅäÇÁ·©½º", "´õºí¸°", "¹ÙÄí", "Ä«ºÒ", "¾Èµµ¶ó¶óº£¾ß", "Æ¼¶ó³ª", "¾ËÁ¦", "·ç¾È´Ù", "¼¼ÀÎÆ®Á¸½º"
				, "¾Æ½º¸¶¶ó", "Å»¸°", "Å°Åä", "¾Æµð½º¾Æ¹Ù¹Ù", "»ê»ì¹Ùµµ¸£", "·±´ø", "»ç³ª", "¹«½ºÄ«Æ®", "Äµ¹ö¶ó", "ºó", "Å×±¸½Ã°¥ÆÄ", "¾Ï¸¸", "Ä¯ÆÈ¶ó", "¸óÅ×ºñµ¥¿À"
				, "Å¸½´ÄËÆ®", "Å°¿¹ÇÁ", "¹Ù±×´Ùµå", "Å×Çì¶õ", "¿¹·ç»ì·½", "Ä«ÀÌ·Î", "·Î¸¶", "´ºµ¨¸®", "ÀÚÄ«¸£Å¸", "µµÄì"
				, "Å·½ºÅÏ", "·ç»çÄ«", "¸»¶óº¸", "Æ®ºô¸®½Ã", "Å¸ÀÌº£ÀÌ", "º£ÀÌÂ¡", "ÁöºÎÆ¼", "ÇÏ¶ó·¹"
				, "ÀºÀÚ¸Þ³ª", "ÇÁ¶óÇÏ", "»êÆ¼¾Æ°í"
				, "¾ß¿îµ¥", "ÇÁ¶óÀÌ¾Æ", "´©¸£¼úÅº", "µµÇÏ", "ÇÁ³ðÆæ", "¿ÀÅ¸¿Í", "³ªÀÌ·Îºñ", "¸ð·Î´Ï", "»êÈ£¼¼", "¾ß¹«¼öÅ©·Î", "»êÅ¸Æäµ¥º¸°íÅ¸", "ºê¶óÀÚºô"
				, "¾Æ¹Ù³ª", "Äí¿þÀÌÆ®", "ÀÚ±×·¹ºê", "ºñ½´ÄÉÅ©", "Å¸¶ó¿Í", "´ÏÄÚ½Ã¿Í"
				, "¹æÄÛ", "µÎ¼¢º£", "µµµµ¸¶", "¾ÓÄ«¶ó", "·Î¸Þ", "´©Äí¾Ë·ÎÆÄ", "¾Æ½´ÇÏ¹ÙÆ®", "Çª³ªÇªÆ¼", "Æ¢´Ï½º", "Æ÷Æ®¿Àºê½ºÆäÀÎ"
				, "ÆÄ³ª¸¶½ÃÆ¼", "¾Æ¼ø½Ã¿Â", "ÀÌ½½¶ó¸¶¹Ùµå", "Æ÷Æ®¸ð¸£Áîºñ", "¸á·¹ÄÉ¿ÀÅ©", "¸®¸¶", "¸®½ºº»", "¹Ù¸£»þ¹Ù", "ÆÄ¸®", "¼ö¹Ù", "Çï½ÌÅ°", "¸¶´Ò¶ó", "ºÎ´ÙÆä½ºÆ®"
				};
		List<Object> check = new ArrayList<Object>();
		
		rand_index = (int) (Math.random()*184);
		check.add(rand_index);
		
		rand_index = (int) (Math.random()*184);
		if(!check.contains(rand_index)) {
			check.add(rand_index);
		}
		
		showCont.setText(nara[rand_index]);
		this.nara = nara[rand_index];
		this.sudo = sudo[rand_index];
	}
	public void check() {
		inputText = input.getText();
		inputText = inputText.replaceAll(" ", "");
		sudo = sudo.replaceAll(" ", "");
		if(inputText.equals(sudo)) {
			correct.setVisible(true);
			score += 10;
			repaint();
			timer.schedule(new TimerTask() {
				@Override
				public void run() {
					correct.setVisible(false);
				}
			}, 600);
		} else {
			incorrect.setVisible(true);
			time -= 3;
			repaint();
			timer.schedule(new TimerTask() {
				@Override
				public void run() {
					incorrect.setVisible(false);
				}
			}, 600);
		}
		
		input.setText("");
		input.requestFocus();
		
		Test();
	}
	public void passChk() {
		passChk++;
		if(passChk == 1) {
			p3.setVisible(false);
			Test();
		} else if(passChk == 2) {
			p2.setVisible(false);
			Test();
		} else if(passChk == 3) {
			p1.setVisible(false);
			Test();
		} else {
			timer.cancel();
			warning.setVisible(true);
			
			timer = new Timer();
			TimerTask task = new TimerTask( ) {
				@Override
				public void run() {
					warning.setVisible(false);
					pass.setEnabled(false);
					if(time >= 1) {
						time--;
						repaint();
					} else {
						timer.cancel();
						overBg.setVisible(true);
						ranking.setVisible(true);
						restart.setVisible(true);
						check.setEnabled(false);
						pass.setEnabled(false);
						input.setEnabled(false);
						try {
							connectionDB();
						} catch (ClassNotFoundException | SQLException e) {
							e.printStackTrace();
						}
					}
				}
			};
			timer.schedule(task, 2000, 1000);
		}
	}
	public void connectionDB() throws ClassNotFoundException, SQLException {
		try {
			name = currentUser();
		} catch (IOException e) {
			e.printStackTrace();
		}
		Class.forName("org.sqlite.JDBC");
		connection = DriverManager.getConnection("jdbc:sqlite:itshow.db");
		
		PreparedStatement ps = connection.prepareStatement("INSERT INTO userTbl VALUES(?, ?)");
		ps.setString(1, name);
		ps.setInt(2, score);
		
		int res = ps.executeUpdate();
		if(res == 1) System.out.println(String.format("%d row insert success", res));
		
		ps.close();
		connection.close();
	}
	public String currentUser() throws IOException {
		BufferedReader br = new BufferedReader(new FileReader("C:/java_study/ITshow/file/userName.txt"));
		String name = br.readLine();
		
		return name;
	}
}

public class Main extends JFrame {
	public JPanel01 jpanel01 = null;
	public JPanel02 jpanel02 = null;
	public JPanel04 jpanel04 = null;
	public JPanel05 jpanel05 = null;
	
	public void change(String panelName) {
		getContentPane().removeAll();
		
		if(panelName.equals("panel01")) {
			getContentPane().add(jpanel01);
		} else if(panelName.equals("panel02")) {
			getContentPane().add(jpanel02);
		} else if(panelName.equals("panel04")) {
			getContentPane().add(jpanel04);
		} else if(panelName.equals("panel05")) {
			getContentPane().add(jpanel05);
		}
		
		revalidate();
		repaint();
	}

	public static void main(String[] args) {
		Main one = new Main();
		
		one.setTitle("2019 IT SHOW EVENT");
		one.jpanel01 = new JPanel01(one); // main
		one.jpanel02 = new JPanel02(one); // explain
		one.jpanel04 = new JPanel04(one); // ranking
		one.jpanel05 = new JPanel05(one); // game
		
		one.add(one.jpanel04);
		one.setDefaultCloseOperation(EXIT_ON_CLOSE);
		one.setExtendedState(JFrame.MAXIMIZED_BOTH);
		
		one.setVisible(true);
	}

}
